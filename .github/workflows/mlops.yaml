name: MLOps

on:
  push:
    branches:
      - main

jobs:
  train:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Activer le compte de service avec le fichier service-account-key.json
      - name: Activate Service Account
        run: |
          gcloud auth activate-service-account --key-file="service-account-key.json"

      - name: List files in context
        run: ls -la

      # Configurer le projet GCP
      - name: Configure gcloud
        run: gcloud config set project modern-bond-303506

      # Vérifier les permissions sur le bucket
      - name: Check GCS Bucket Access
        run: |
          echo "Testing GCS access..."
          gsutil ls gs://sportify_classifier || echo "Bucket access failed, ensure credentials and permissions are correct"

      # Construire l'image Docker et la pousser sur GCR
      - name: Build and push Docker image
        run: |
          echo "Building Docker image and pushing to GCR..."
          gcloud builds submit --tag gcr.io/modern-bond-303506/train_image:latest


      # Lancer le job Vertex AI
      - name: Launch Vertex AI job
        id: launch_job
        run: |
          echo "Launching Vertex AI Job..."
          JOB_ID=$(gcloud ai custom-jobs create \
            --region=us-central1 \
            --display-name="entraînement-mlops" \
            --worker-pool-spec=machine-type=n1-standard-4,container-image-uri=gcr.io/modern-bond-303506/train_image:latest \
            --service-account=sportify-classier@modern-bond-303506.iam.gserviceaccount.com \
            --format='value(name)')
          echo "Vertex AI Job ID: $JOB_ID"
          echo "JOB_ID=$JOB_ID" >> $GITHUB_ENV

      # Attendre la fin du job Vertex AI
      - name: Wait for job to finish
        run: |
          echo "Waiting for Vertex AI Job to finish..."
          STATUS=$(gcloud ai custom-jobs describe "${JOB_ID}" --region=us-central1 --format='value(state)')
          while [ "$STATUS" != "SUCCEEDED" ] && [ "$STATUS" != "FAILED" ]; do
            echo "Job status: $STATUS"
            echo "Fetching logs for Job ID: ${JOB_ID}..."
            gcloud logging read "resource.type=ml_job AND resource.labels.job_id=\"${JOB_ID}\"" --limit=50 --format="value(textPayload)"
            sleep 30
            STATUS=$(gcloud ai custom-jobs describe "${JOB_ID}" --region=us-central1 --format='value(state)')
          done

          echo "Final job status: $STATUS"
          if [ "$STATUS" = "FAILED" ]; then
            echo "Fetching detailed logs for failure..."
            gcloud logging read "resource.type=ml_job AND resource.labels.job_id=\"${JOB_ID}\"" --limit=100 --format="value(textPayload)"
            exit 1
          fi
        env:
          JOB_ID: ${{ env.JOB_ID }}

      # Récupérer le modèle et les métriques depuis GCS
      - name: Pull new model and metrics from GCS
        run: |
          echo "Pulling model and metrics from GCS..."
          gsutil cp -r gs://sportify_classifier/training-outputs/model_versions .
          gsutil cp -r gs://sportify_classifier/training-outputs/evaluation_outputs .

      # Mettre à jour DVC avec le nouveau modèle et métriques
      - name: DVC add and push
        run: |
          echo "Updating DVC with new model and metrics..."
          dvc add model_versions
          dvc add evaluation_outputs/metrics.json
          git add model_versions.dvc evaluation_outputs/metrics.json.dvc
          git commit -m "Add new model and metrics"
          dvc push
          git push